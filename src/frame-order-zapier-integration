// Frame Order Zapier Integration for Larson-Juhl
// This code is hosted on Replit and exposes an API endpoint for Zapier integration

const express = require('express');
const bodyParser = require('body-parser');
const { processOrders } = require('./custom-frame-order-automation');
const fs = require('fs');
const path = require('path');

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(bodyParser.json());
app.use(express.static('public'));

// Create orders directory if it doesn't exist
const ordersDir = path.join(__dirname, 'orders');
if (!fs.existsSync(ordersDir)) {
  fs.mkdirSync(ordersDir);
}

// Webhook endpoint for Zapier to trigger order processing
app.post('/api/process-orders', async (req, res) => {
  try {
    const { apiKey, orders } = req.body;

    // Validate API key (simple security measure)
    if (apiKey !== process.env.API_KEY) {
      return res.status(401).json({ error: 'Invalid API key' });
    }

    // Validate order data
    if (!orders || !Array.isArray(orders) || orders.length === 0) {
      return res.status(400).json({ error: 'Invalid order data' });
    }

    // Add timestamp and order ID
    const timestamp = new Date().toISOString();
    const orderId = require('crypto').randomBytes(8).toString('hex');

    // Save the order and process it
    const orderData = {
      id: orderId,
      timestamp,
      orders,
      status: 'pending'
    };

    fs.writeFileSync(
      path.join(ordersDir, `${orderId}.json`),
      JSON.stringify(orderData, null, 2)
    );

    // Process orders asynchronously
    processOrders(orders)
      .then(() => {
        orderData.status = 'completed';
        fs.writeFileSync(
          path.join(ordersDir, `${orderId}.json`),
          JSON.stringify(orderData, null, 2)
        );
      })
      .catch(err => {
        orderData.status = 'failed';
        orderData.error = err.message;
        fs.writeFileSync(
          path.join(ordersDir, `${orderId}.json`),
          JSON.stringify(orderData, null, 2)
        );
      });

    return res.status(200).json({ 
      message: 'Order processing started',
      orderId,
      timestamp
    });
  } catch (error) {
    console.error('API error:', error);
    return res.status(500).json({ error: 'Internal server error' });
  }
});

// Start the server
app.listen(PORT, '0.0.0.0', () => {
  console.log(`Frame Order API Server running on port ${PORT}`);
});